<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

WSO2 Inc. licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file except
in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the
specific language governing permissions and limitations
under the License.
-->

<proxy name="fileconnector" startOnLoad="true" statistics="disable" trace="disable"
       transports="https,http"
       xmlns="http://ws.apache.org/ns/synapse">
    <target>
        <inSequence>
            <property name="source" expression="json-eval($.source)"/>
            <property name="destination" expression="json-eval($.destination)"/>
            <property name="inputContent" expression="json-eval($.inputContent)"/>
            <property name="encoding" expression="json-eval($.encoding)"/>
            <property name="contentType" expression="json-eval($.contentType)"/>
            <property name="filePattern" expression="json-eval($.filePattern)"/>
            <property name="recursiveSearch" expression="json-eval($.recursiveSearch)"/>
            <property name="dirPattern" expression="json-eval($.dirPattern)"/>
            <property name="streaming" expression="json-eval($.streaming)"/>
            <property name="setTimeout" expression="json-eval($.setTimeout)"/>
            <property name="setPassiveMode" expression="json-eval($.setPassiveMode)"/>
            <property name="setSoTimeout" expression="json-eval($.setSoTimeout)"/>
            <property name="setStrictHostKeyChecking"
                      expression="json-eval($.setStrictHostKeyChecking)"/>
            <property name="setUserDirIsRoot" expression="json-eval($.setUserDirIsRoot)"/>

            <switch source="get-property('transport', 'Action')">
                <case regex="urn:create">
                    <fileconnector.create>
                        <source>{$ctx:source}</source>
                        <inputContent>{$ctx:inputContent}</inputContent>
                        <encoding>{$ctx:encoding}</encoding>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.create>
                </case>
                <case regex="urn:append">
                    <fileconnector.append>
                        <destination>{$ctx:destination}</destination>
                        <inputContent>{$ctx:inputContent}</inputContent>
                        <encoding>{$ctx:encoding}</encoding>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.append>
                </case>
                <case regex="urn:delete">
                    <fileconnector.delete>
                        <source>{$ctx:source}</source>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.delete>
                </case>
                <case regex="urn:copy">
                    <fileconnector.copy>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.copy>
                </case>
                <case regex="urn:archive">
                    <fileconnector.archives>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.archives>
                </case>
                <case regex="urn:isFileExist">
                    <fileconnector.isFileExist>
                        <source>{$ctx:source}</source>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.isFileExist>
                </case>
                <case regex="urn:move">
                    <fileconnector.move>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.move>
                </case>
                <case regex="urn:read">
                    <fileconnector.read>
                        <source>{$ctx:source}</source>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <contentType>{$ctx:contentType}</contentType>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.read>
                </case>
                <case regex="urn:unzip">
                    <fileconnector.unzip>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.unzip>
                </case>
                <case regex="urn:listFileZip">
                    <fileconnector.listFileZip>
                        <source>{$ctx:source}</source>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.listFileZip>
                </case>
                <case regex="urn:search">
                    <fileconnector.search>
                        <source>{$ctx:source}</source>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <recursiveSearch>{$ctx:recursiveSearch}</recursiveSearch>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}
                        </setStrictHostKeyChecking>
                    </fileconnector.search>
                </case>
            </switch>
            <respond/>
        </inSequence>
    </target>
    <description/>
</proxy>
